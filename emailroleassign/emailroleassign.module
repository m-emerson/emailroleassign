<?php
/**
 * @file
 * A module that assigns role permissions based on email domains 
 */
 
/**
 * Implements hook_menu().
 */
function emailroleassign_admin() {
    $form = array();
  
    $form['allowed_domains'] = array(
        '#type' => 'textfield',
        '#title' => 'Allowed Domains',
        '#default_value' => variable_get('allowed_domains', 'edu.au, uq.edu.au'),
        '#size' => 60,
        '#maxlength' => 255,
        '#description' => 'Comma separated value of allowed email domains',
        '#required' => TRUE,
    );
    
    $roles = user_roles(TRUE);
    unset($roles['2']);
    $form['allowed_domains_assigned_role'] = array(
      '#type' => 'radios',
      '#title' => t('Role to automatically assign to new registrants with the correct email'),
      '#options' => $roles,
      '#default_value' => variable_get('registration_role_roles', ''),
      '#description' => t('The selected role will be assigned to users who register using the user-registration form. Be sure this role does not have any privileges you fear giving out without reviewing who receives it.'),
    );
    return system_settings_form($form);
}

/**
 * Implements hook_menu()
 */
function emailroleassign_menu() {
    $items = array();
  
    $items['admin/config/people/emailroleassign'] = array(
        'title' => 'emailroleassign Settings',
        'description' => 'SETTINGS',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('emailroleassign_admin'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );
  
    return $items;
} 

/**
 * Implements hook_admin_paths().
 */
function emailroleassign_admin_paths() {
    return array('admin/config/people/emailroleassign' => TRUE);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function emailroleassign_form_user_register_form_alter(&$form, $form_state) {
  // Insert our handler BEFORE user_register_submit().
  // This allows us to add the role before the new user is saved.
  array_unshift($form['#submit'], 'emailroleassign_form_user_register_submit');
}

/**
 * Submit handler for the user registration form.
 */
function emailroleassign_form_user_register_submit(&$form, &$form_state) {
  if ($rid = variable_get('allowed_domains_assigned_role', '')) {
    $domains = variable_get('allowed_domains', '*.edu.*');
    // Remove all whitespace from domains
    $domains = preg_replace('/\s+/', '', $domains);
    $domains_arr = explode(",", $domains);

    // Determine this account's email domain
    $mailTemp = $form['account']['mail']['#value'];
    $splitIndex = strpos($mailTemp, '@') + 1;
    $emailDomain = substr($mailTemp, $splitIndex, strlen($mailTemp));

    $domainFlag = 0;
	
    foreach($domains_arr as $domain) {
      if (fnmatch($domain, $emailDomain)) {
        $domainFlag = 1;
        $roles = user_roles(TRUE);
        $form_state['values']['roles'][$rid] = $roles[$rid];
        break;
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function emailroleassign_form_alter(&$form, &$form_state, $form_id){
    switch($form_id) {  
        /* Alter the description to detail our new modifications */
        case 'user_register_form': // the value we stole from the rendered form  
            $form['account']['mail']['#description'] = t('Please note that the following domains will be granted full user access: ') . variable_get('allowed_domains', 'edu.au, uq.edu.au') . t('.</br>Other domains will be able to browse content but will be unable to post messages until admin approval is granted');
        break;
    }  
}

